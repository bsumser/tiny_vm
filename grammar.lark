?start: program

program : statement* (return_statement)

?statement : r_exp ";" | assignment ";" | if_statement | while_statement | return_statement

assignment : ident [":" ident] "=" r_exp

return_statement : "return" [r_exp] ";"

while_statement : "while" log_exp "{" (statement)* "}"

if_statement : "if" log_exp "{" (statement)* "}" else_statement
        | "if" log_exp "{" (statement)* "}"

else_statement : "else if" log_exp "{" (statement)* "}" else_statement
               | "else if" log_exp "{" (statement)* "}"
               | "else" "{" (statement)* "}"

log_exp: r_exp "==" r_exp   -> equals
        | r_exp "<=" r_exp   -> less_equals
        | r_exp "<" r_exp    -> less_than
        | r_exp ">=" r_exp   -> great_equals
        | r_exp ">" r_exp    -> great_than
        | r_exp "and" r_exp  -> and_
        | r_exp "or" r_exp   -> or_
        | "not" r_exp           -> not_
        | "(" r_exp ")"
        | NUMBER
    
r_exp : sum

?sum: product
        | sum "+" product   -> add
        | sum "-" product   -> sub
    
    ?product: atom
        | product "*" atom  -> mul
        | product "/" atom  -> div
    
    ?atom: NUMBER           -> number
        | IDENT             -> ident
        | "-" atom         -> neg
        | "(" sum ")"

number: NUMBER
NUMBER: /[0-9]+/
ident: IDENT
IDENT: /[_a-zA-Z][_a-zA-Z0-9]*/

%import common.WS
%ignore WS